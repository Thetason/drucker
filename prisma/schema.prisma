// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)  // 사용자 역할
  isActive  Boolean  @default(true)   // 계정 활성화 상태
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loginCount   Int       @default(0)
  lastLoginAt  DateTime?
  
  // User's persona data
  persona   Persona?
  
  // User's content plans
  contentPlans ContentPlan[]
  
  // User's tasks
  tasks     Task[]

  // User login activity
  loginActivities LoginActivity[]
  
  // Password reset requests
  passwordResetRequests PasswordResetRequest[]
}

enum UserRole {
  MASTER  // 마스터 관리자
  ADMIN   // 일반 관리자
  USER    // 일반 사용자
}

model Persona {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  name            String
  tagline         String?
  expertise       String?
  monetizationPlan String?
  
  // Lists stored as JSON
  whatICanDo      Json?
  whatILove       Json?
  whoCanIHelp     Json?
  contentTopics   Json?
  targetInterests Json?
  targetPainPoints Json?
  
  // Platform info
  primaryPlatform String?
  contentFrequency String?
  contentStyle    String?
  targetAge       String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ContentPlan {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  platform        String
  targetAudience  String?
  hook            String?
  mainContent     Json?
  keywords        Json?
  duration        String?
  goal            String?
  metadata        Json?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tasks           Task[]
}

model Task {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId          String?
  plan            ContentPlan?  @relation(fields: [planId], references: [id], onDelete: SetNull)

  title           String
  description     String?
  date            DateTime
  startTime       String?
  endTime         String?
  status          TaskStatus    @default(PENDING)
  priority        TaskPriority  @default(MEDIUM)
  reminderMinutes Int?
  reminderMethod  String?
  color           String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model PasswordResetRequest {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        ResetStatus  @default(PENDING)
  resolverEmail String?
  resolverNote  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum ResetStatus {
  PENDING
  APPROVED
  REJECTED
}

model LoginActivity {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())
}
