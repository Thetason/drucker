// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // User's persona data
  persona   Persona?
  
  // User's content plans
  contentPlans ContentPlan[]
  
  // User's tasks
  tasks     Task[]
}

model Persona {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  name            String
  tagline         String?
  expertise       String?
  monetizationPlan String?
  
  // Lists stored as JSON
  whatICanDo      Json?
  whatILove       Json?
  whoCanIHelp     Json?
  contentTopics   Json?
  targetInterests Json?
  targetPainPoints Json?
  
  // Platform info
  primaryPlatform String?
  contentFrequency String?
  contentStyle    String?
  targetAge       String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ContentPlan {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  platform        String
  targetAudience  String?
  hook            String?
  mainContent     Json?
  keywords        Json?
  duration        String?
  goal            String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Task {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  stage           String
  dueDate         DateTime?
  notes           String?
  completed       Boolean  @default(false)
  platform        String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}